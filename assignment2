#1. Create a List L that is defined as= [10, 20, 30, 40, 50, 60, 70, 80].
#i. WAP to add 200 and 300 to L.
L=[10,20,30,40,50,60,70,80]
L.append(200)
L.append(300)
print(L)
#ii. WAP to remove 10 and 30 from L.
L.remove(10)
L.remove(30)
print(L)
#iii. WAP to sort L in ascending order.
L.sort()
print(L)
#iv. WAP to sort L in descending order. 
L.sort(reverse=True)
print(L)


#2. Create a tuple of marks scored as scores = (45, 89.5, 76, 45.4, 89, 92, 58, 45) and perform the following operations using tuple functions:
# i. Identify the highest score and its index in the tuple.
t=(45,89.5, 76, 45.4, 89, 92, 58, 45)
a=max(t)
print(a)
print(t.index(a))
# ii. Find the lowest score and count how many times it appears.
b=min(t)
print(b)
print(t.count(b))
# iii. Reverse the tuple and return it as a list.
rev_t=t[::-1]
print(list(rev_t))
# iv. Check if a specific score ‘76’ (input by the user) is present in the tuple and print its first occurrence index, or a message saying it’s not present. 
s=76
flag=False
for k in t:
    if(s==k):
        flag=True
        break
if(flag):
    print("element is present",t.index(k))
else:
    print("element is not present")

#3. WAP to create a list of 100 random numbers between 100 and 900. Count and print the:
#i. All odd numbers
import random
i=0
l=[]
while(i<100):
    rand=random.randrange(100,900,1)
    l.append(rand)
    i+=1
count=0
for value in l:
    if(value%2!=0):
        count+=1
        print(value)
#ii. All even numbers
count1=0
for value in l:
    if(value%2==0):
        count1+=1
        print(value)
#iii. All prime numbers
count2 = 0
J = 2  
for value in l:
    if value < 2:
        continue 
    flag = True 
    for i in range(2, int(value ** 0.5) + 1): 
        if value % i == 0:
            flag = False  
            break
    if flag:
        count2 += 1
        print(value)

#4. Consider the following two sets, A and B, representng scores of two teams in multiple matches. A = {34, 56, 78, 90} and B = {78, 45, 90, 23}
# WAP to perform the following operaƟons using set funcƟons:
# i. Find the unique scores achieved by both teams (union of sets).
A = {34, 56, 78, 90}
B = {78, 45, 90, 23}
C=A.union(B)
print(C)
# ii. Identify the scores that are common to both teams (intersecƟon of sets).
D=A.intersection(B)
print(D)
# iii. Find the scores that are exclusive to each team (symmetric difference).
E=A.symmetric_difference(B)
print(E)
# iv. Check if the scores of team A are a subset of team B, and if team B's scores are a superset of team A.
print(A.issubset(B))
print(B.issuperset(A))
# v. Remove a specific score 𝑋 (input by the user) from set A if it exists. If not, print a message saying it is not present. 
X=int(input("enter the number")) 
flag=False                                                          
for key in A:
    if(X==key):
        A.remove(X)
        flag=True
        break
if(flag):
    print("the no. is removed")
else:
    print("the no. is not in the set")

#5. Write a program to rename a key city to a location in the following dicƟonary.
sample_dict = {
    "name" : "Kelly",
    "age" : 25,
    "salary" : 8000,
    "city" : "New york"
}
sample_dict["location"]=sample_dict.pop("city")
print("Updated Dictionary",sample_dict)
